import os
import pandas as pd

# Define paths
input_dir = "C:/TempData"
output_dir = "C:/Done"

# Reference sample files as 30-second segments
reference_sample_files = [
    "sample1.csv",
    "sample2.csv",
    # Add more samples if needed
]

# Load each reference sample as a DataFrame and compute its mean and variance
reference_samples = [pd.read_csv(os.path.join(input_dir, sample)) for sample in reference_sample_files]

def calculate_reference_features(sample):
    return {
        "mean_amplitude": sample["Amplitude"].mean(),
        "amplitude_variance": sample["Amplitude"].var(),
    }

# Create list of reference features for each sample
reference_features = [calculate_reference_features(sample) for sample in reference_samples]

# Define matching tolerances for amplitude
amplitude_tolerance = 0.05
amplitude_variance_tolerance = 0.1

# Sampling parameters
sample_rate = 16000  # in Hz
window_samples = 30 * sample_rate  # 30 seconds of samples (480,000 samples at 16kHz)
step_samples = 5 * sample_rate  # step by 5 seconds (80,000 samples at 16kHz)

# Process each 5-minute data file
files = sorted([f for f in os.listdir(input_dir) if os.path.isfile(os.path.join(input_dir, f))])

for file_name in files:
    print(f"Processing file: {file_name}")
    file_path = os.path.join(input_dir, file_name)
    data = pd.read_csv(file_path)

    # Sliding window over the data in sample counts
    start_index = 0
    matching_segments = []

    while start_index + window_samples <= len(data):
        # Extract the window segment of 30 seconds (480,000 samples)
        window_data = data.iloc[start_index : start_index + window_samples]

        # Calculate features for the current window
        window_features = {
            "mean_amplitude": window_data["Amplitude"].mean(),
            "amplitude_variance": window_data["Amplitude"].var(),
        }

        # Compare window features with each reference sample
        for ref_idx, ref_features in enumerate(reference_features):
            amplitude_diff = abs(window_features["mean_amplitude"] - ref_features["mean_amplitude"])
            amplitude_variance_diff = abs(window_features["amplitude_variance"] - ref_features["amplitude_variance"])

            if amplitude_diff <= amplitude_tolerance and amplitude_variance_diff <= amplitude_variance_tolerance:
                print(f"Match found for reference {ref_idx+1} in file {file_name} at sample index {start_index}")

                # Save matching segment details
                matching_segments.append({
                    "start_sample": start_index,
                    "end_sample": start_index + window_samples,
                    "reference_id": ref_idx+1,
                    "file_name": file_name
                })

        # Move the sliding window by 80,000 samples (5 seconds)
        start_index += step_samples

    # Save results to a file
    if matching_segments:
        result_filename = os.path.join(output_dir, f"matches_{file_name}.csv")
        results_df = pd.DataFrame(matching_segments)
        results_df.to_csv(result_filename, index=False)
        print(f"Matching segments saved to {result_filename}")
    else:
        print("No matches found in this file.")
